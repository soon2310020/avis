plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "org.asciidoctor.convert" version "1.5.3"
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'  // querydsl plugin
    id 'java'
    id "org.liquibase.gradle" version "2.0.3"
    id "org.sonarqube" version "3.4.0.2513"
}

ext {
    bootstrapVersion    = "4.1.1"
    junitJupiterVersion = "5.3.2"
	springBootAdminVersion = "2.1.6"
}
// spring boot 2.1은 내장 톰캣이 9.0 -> reasonParse(OK 텍스트) 를 보내지 않음 -> 8.5.34로 지정함.
ext['tomcat.version'] = '8.5.34'


group = 'com.onlinepowers'
version = '1.0.0'
sourceCompatibility = "11"

repositories {
    mavenCentral()
    maven {url "https://build.shibboleth.net/nexus/content/repositories/releases/"}
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    // REST Docs
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'

	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'io.springfox:springfox-bean-validators:2.9.2'

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    //implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('de.codecentric:spring-boot-admin-starter-client')

    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1"
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('org.springframework.session:spring-session-core')
    implementation('org.springframework.session:spring-session-jdbc')

    implementation('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect')
    implementation("org.webjars:bootstrap:${bootstrapVersion}")

    implementation("com.querydsl:querydsl-apt")
    implementation("com.querydsl:querydsl-jpa")
    //implementation("com.querydsl:querydsl-mongodb")
    //implementation("com.querydsl:querydsl-sql")

    // Spring Security SAML
    implementation ("org.springframework.security.extensions:spring-security-saml2-core:1.0.10.RELEASE")

    // Jpa FetchType.LAZY serialize
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.6")
    implementation("com.fasterxml.jackson.module:jackson-module-afterburner:2.9.6")

    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.740'

    // https://mvnrepository.com/artifact/com.itextpdf/itextpdf
    implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.0.6'

    // ModelMapper
    implementation('org.modelmapper:modelmapper:2.3.2')


    // JWT
    implementation('io.jsonwebtoken:jjwt:0.9.1')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    // DB
    implementation('com.h2database:h2')
    runtimeOnly('mysql:mysql-connector-java:8.0.24')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    // runtime('com.oracle:ojdbc7:12.1.0.2.0')

    // jaspers report pdf
    implementation 'com.lowagie:itext:2.1.7'
    implementation 'net.sf.jasperreports:jasperreports:5.0.1'

    // export excel
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.1' //XLS
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.1' //XLXS
    implementation group: 'org.jxls', name: 'jxls', version: '2.10.0'
    implementation group: 'org.jxls', name: 'jxls-poi', version: '2.10.0'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')

    // Junit5
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    testImplementation("org.assertj:assertj-core:3.13.2")

    implementation('net.sf.dozer:dozer:5.5.1')
    // https://mvnrepository.com/artifact/io.craftsman/dozer-jdk8-support
    implementation group: 'io.craftsman', name: 'dozer-jdk8-support', version: '1.0.6'
    implementation('com.google.code.gson:gson:2.8.5')


    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20090211'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'

    implementation("org.liquibase:liquibase-core:4.3.5")
    implementation 'com.notnoop.apns:apns:1.0.0.Beta6'

    implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'
    implementation 'com.google.maps:google-maps-services:0.15.0'
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    
    // Kafka
	implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.2.9.RELEASE'
    implementation 'software.amazon.msk:aws-msk-iam-auth:1.1.6'
    implementation 'com.amazonaws:aws-java-sdk:1.11.991'


}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

// REST Docs
ext {
    snippetsDir = file('build/generated-snippets')
}
test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    baseName "mms"

    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }

    launchScript()
}

/**
 * querydsl 적용
 */
apply plugin: "com.ewerk.gradle.plugins.querydsl"
def querydslSrcDir = 'src/main/generated'


querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', querydslSrcDir
        }
    }
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}
//targetCompatibility = JavaVersion.VERSION_1_9

//compileQuerydsl.doFirst {
  //  if(file(querydslSrcDir).exists())
    //     delete(file(querydslSrcDir))
//}
